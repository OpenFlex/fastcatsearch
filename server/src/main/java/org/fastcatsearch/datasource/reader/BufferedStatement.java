package org.fastcatsearch.datasource.reader;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Statement;
import java.sql.Time;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONTokener;
import org.json.JSONWriter;

public class BufferedStatement implements
		PreparedStatement {
	private static final Logger logger = LoggerFactory.getLogger(BufferedStatement.class);
//	public static void main(String[] arg) throws Exception {
//		Class.forName("com.mysql.jdbc.Driver");
//		Connection conn = java.sql.jdbc.DriverManager.getConnection("jdbc:mysql://192.168.0.200:3306/mysql","root","websqrd1151");
//		
//		PreparedStatement pst = new BufferedStatement(conn.prepareStatement("select * from user"));
//		
//		ResultSet res = pst.executeQuery();
//		
//		System.out.println("--------------------------------------------------------------------------------");
//		
//		while(res.next()) {
//			System.out.println("["+res.getString(4)+"]");
//		}
//		System.out.println("--------------------------------------------------------------------------------");
//	}
	
	private PreparedStatement pst;
	
	public BufferedStatement(PreparedStatement pst) {
		this.pst = pst;
	}

	public void addBatch() throws SQLException {
		pst.addBatch();
	}

	public void addBatch(String sql) throws SQLException {
		pst.addBatch(sql);
	}

	public void cancel() throws SQLException {
		pst.cancel();
	}

	public void clearBatch() throws SQLException {
		pst.clearBatch();
	}

	public void clearParameters() throws SQLException {
		pst.clearParameters();
	}

	public void clearWarnings() throws SQLException {
		pst.clearWarnings();
	}

	public void close() throws SQLException {
		if(pst!=null) { pst.close(); }
	}

	public boolean execute() throws SQLException {
		return pst.execute();
	}

	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		return pst.execute(sql, autoGeneratedKeys);
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return pst.execute(sql, columnIndexes);
	}

	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		return pst.execute(sql, columnNames);
	}

	public boolean execute(String sql) throws SQLException {
		return pst.execute(sql);
	}

	public int[] executeBatch() throws SQLException {
		return pst.executeBatch();
	}

	final int FETCH_RESULT_SIZE=10000;

	public ResultSet executeQuery() throws SQLException {
		
		BufferedWriter writer = null;
		JSONWriter jsonWriter = null;
		File file = null;
		List<File> files = new ArrayList<File>();
		try {
			int resultInx=0;
			
			ResultSet res = pst.executeQuery();
			ResultSetMetaData metaData = new BufferedResultSetMetaData(res.getMetaData());
			
			while(res.next()) {
				if(resultInx==0) {
					if(writer!=null) {
						jsonWriter.endArray();
						writer.flush();
						writer.close();
					}
					file = File.createTempFile("resultset", ".tmp");
					files.add(file);
					writer = new BufferedWriter(new FileWriter(file));
					jsonWriter = new JSONWriter(writer);
					jsonWriter.array();
				}
				if(resultInx++ > FETCH_RESULT_SIZE) {
					resultInx = 0;
				}

				jsonWriter.array();
				for(int inx=1;inx <= metaData.getColumnCount(); inx++) {
					int type = metaData.getColumnType(inx);
					String value=res.getString(inx);
					if(value==null) {
						
						if(type == Types.BLOB || type == Types.BINARY || type == Types.LONGVARBINARY || type == Types.VARBINARY || type == Types.JAVA_OBJECT) {
							InputStream is = null;
							try {
								is = res.getBinaryStream(inx);
								if (is != null) {
									value = "";
									byte[] data = new byte[1024];
									for(int rlen=0;(rlen = is.read(data, 0, data.length)) != -1;) { value+=new String(data,0,rlen); }
								}else{
									value = "";
								}
								
							} catch (IOException e) {
								throw new SQLException("Error while writing Blob field. column => "+metaData.getColumnName(inx));
							} finally {
								if(is!=null) try { is.close(); } catch (IOException e) { }
							}
							
						} else if(type == Types.CLOB) {
							
							File f = null;
							BufferedReader is = null;
							try {
								f = File.createTempFile("clob."+inx, ".tmp");
								Reader reader = res.getCharacterStream(inx);
								if(reader != null){
									is = new BufferedReader(reader);
									value = "";
									for (String str = "";(str = is.readLine())!=null;) { value+=str+"\n"; }
								}else{
									value = "";
								}
							} catch (IOException e) {
								throw new SQLException("Error while writing Clob field. column => "+metaData.getColumnName(inx));
							} finally {
								if(is!=null) try { is.close(); } catch (IOException e) { }
								if(f!=null && f.exists()) { f.delete(); }
							}
							
						}
						
					}
					jsonWriter.value(value);
				}
				jsonWriter.endArray();
			}

			if(writer!=null) {
				jsonWriter.endArray();
				writer.flush();
				writer.close();
			}
			res.close();
			pst.close();
			pst = null;
			return new BufferedResultSet(files, metaData);
			
		} catch (IOException e) {
			throw new SQLException(e);
		} catch (JSONException e) {
			throw new SQLException(e);
		} finally {
			if(writer!=null) try { writer.close(); } catch (IOException e) { }
		}
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		return pst.executeQuery(sql);
	}

	public int executeUpdate() throws SQLException {
		return pst.executeUpdate();
	}

	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		return pst.executeUpdate(sql, autoGeneratedKeys);
	}

	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		return pst.executeUpdate(sql, columnIndexes);
	}

	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		return pst.executeUpdate(sql, columnNames);
	}

	public int executeUpdate(String sql) throws SQLException {
		return pst.executeUpdate(sql);
	}

	public Connection getConnection() throws SQLException {
		return pst.getConnection();
	}

	public int getFetchDirection() throws SQLException {
		return pst.getFetchDirection();
	}

	public int getFetchSize() throws SQLException {
		return pst.getFetchSize();
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return pst.getGeneratedKeys();
	}

	public int getMaxFieldSize() throws SQLException {
		return pst.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		return pst.getMaxRows();
	}

	public ResultSetMetaData getMetaData() throws SQLException {
		return pst.getMetaData();
	}

	public boolean getMoreResults() throws SQLException {
		return pst.getMoreResults();
	}

	public boolean getMoreResults(int current) throws SQLException {
		return pst.getMoreResults(current);
	}

	public ParameterMetaData getParameterMetaData() throws SQLException {
		return pst.getParameterMetaData();
	}

	public int getQueryTimeout() throws SQLException {
		return pst.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException {
		return pst.getResultSet();
	}

	public int getResultSetConcurrency() throws SQLException {
		return pst.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException {
		return pst.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException {
		return pst.getResultSetType();
	}

	public int getUpdateCount() throws SQLException {
		return pst.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException {
		return pst.getWarnings();
	}

	public boolean isClosed() throws SQLException {
		return pst.isClosed();
	}

	public boolean isPoolable() throws SQLException {
		return pst.isPoolable();
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return pst.isWrapperFor(iface);
	}

	public void setArray(int parameterIndex, Array x) throws SQLException {
		pst.setArray(parameterIndex, x);
	}

	public void setAsciiStream(int parameterIndex, InputStream x, int length)
			throws SQLException {
		pst.setAsciiStream(parameterIndex, x, length);
	}

	public void setAsciiStream(int parameterIndex, InputStream x, long length)
			throws SQLException {
		pst.setAsciiStream(parameterIndex, x, length);
	}

	public void setAsciiStream(int parameterIndex, InputStream x)
			throws SQLException {
		pst.setAsciiStream(parameterIndex, x);
	}

	public void setBigDecimal(int parameterIndex, BigDecimal x)
			throws SQLException {
		pst.setBigDecimal(parameterIndex, x);
	}

	public void setBinaryStream(int parameterIndex, InputStream x, int length)
			throws SQLException {
		pst.setBinaryStream(parameterIndex, x, length);
	}

	public void setBinaryStream(int parameterIndex, InputStream x, long length)
			throws SQLException {
		pst.setBinaryStream(parameterIndex, x, length);
	}

	public void setBinaryStream(int parameterIndex, InputStream x)
			throws SQLException {
		pst.setBinaryStream(parameterIndex, x);
	}

	public void setBlob(int parameterIndex, Blob x) throws SQLException {
		pst.setBlob(parameterIndex, x);
	}

	public void setBlob(int parameterIndex, InputStream inputStream, long length)
			throws SQLException {
		pst.setBlob(parameterIndex, inputStream, length);
	}

	public void setBlob(int parameterIndex, InputStream inputStream)
			throws SQLException {
		pst.setBlob(parameterIndex, inputStream);
	}

	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		pst.setBoolean(parameterIndex, x);
	}

	public void setByte(int parameterIndex, byte x) throws SQLException {
		pst.setByte(parameterIndex, x);
	}

	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		pst.setBytes(parameterIndex, x);
	}

	public void setCharacterStream(int parameterIndex, Reader reader, int length)
			throws SQLException {
		pst.setCharacterStream(parameterIndex, reader, length);
	}

	public void setCharacterStream(int parameterIndex, Reader reader,
			long length) throws SQLException {
		pst.setCharacterStream(parameterIndex, reader, length);
	}

	public void setCharacterStream(int parameterIndex, Reader reader)
			throws SQLException {
		pst.setCharacterStream(parameterIndex, reader);
	}

	public void setClob(int parameterIndex, Clob x) throws SQLException {
		pst.setClob(parameterIndex, x);
	}

	public void setClob(int parameterIndex, Reader reader, long length)
			throws SQLException {
		pst.setClob(parameterIndex, reader, length);
	}

	public void setClob(int parameterIndex, Reader reader) throws SQLException {
		pst.setClob(parameterIndex, reader);
	}

	public void setCursorName(String name) throws SQLException {
		pst.setCursorName(name);
	}

	public void setDate(int parameterIndex, Date x, Calendar cal)
			throws SQLException {
		pst.setDate(parameterIndex, x, cal);
	}

	public void setDate(int parameterIndex, Date x) throws SQLException {
		pst.setDate(parameterIndex, x);
	}

	public void setDouble(int parameterIndex, double x) throws SQLException {
		pst.setDouble(parameterIndex, x);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		pst.setEscapeProcessing(enable);
	}

	public void setFetchDirection(int direction) throws SQLException {
		pst.setFetchDirection(direction);
	}

	public void setFetchSize(int rows) throws SQLException {
		pst.setFetchSize(rows);
	}

	public void setFloat(int parameterIndex, float x) throws SQLException {
		pst.setFloat(parameterIndex, x);
	}

	public void setInt(int parameterIndex, int x) throws SQLException {
		pst.setInt(parameterIndex, x);
	}

	public void setLong(int parameterIndex, long x) throws SQLException {
		pst.setLong(parameterIndex, x);
	}

	public void setMaxFieldSize(int max) throws SQLException {
		pst.setMaxFieldSize(max);
	}

	public void setMaxRows(int max) throws SQLException {
		pst.setMaxRows(max);
	}

	public void setNCharacterStream(int parameterIndex, Reader value,
			long length) throws SQLException {
		pst.setNCharacterStream(parameterIndex, value, length);
	}

	public void setNCharacterStream(int parameterIndex, Reader value)
			throws SQLException {
		pst.setNCharacterStream(parameterIndex, value);
	}

	public void setNClob(int parameterIndex, NClob value) throws SQLException {
		pst.setNClob(parameterIndex, value);
	}

	public void setNClob(int parameterIndex, Reader reader, long length)
			throws SQLException {
		pst.setNClob(parameterIndex, reader, length);
	}

	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		pst.setNClob(parameterIndex, reader);
	}

	public void setNString(int parameterIndex, String value)
			throws SQLException {
		pst.setNString(parameterIndex, value);
	}

	public void setNull(int parameterIndex, int sqlType, String typeName)
			throws SQLException {
		pst.setNull(parameterIndex, sqlType, typeName);
	}

	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		pst.setNull(parameterIndex, sqlType);
	}

	public void setObject(int parameterIndex, Object x, int targetSqlType,
			int scaleOrLength) throws SQLException {
		pst.setObject(parameterIndex, x, targetSqlType, scaleOrLength);
	}

	public void setObject(int parameterIndex, Object x, int targetSqlType)
			throws SQLException {
		pst.setObject(parameterIndex, x, targetSqlType);
	}

	public void setObject(int parameterIndex, Object x) throws SQLException {
		pst.setObject(parameterIndex, x);
	}

	public void setPoolable(boolean poolable) throws SQLException {
		pst.setPoolable(poolable);
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		pst.setQueryTimeout(seconds);
	}

	public void setRef(int parameterIndex, Ref x) throws SQLException {
		pst.setRef(parameterIndex, x);
	}

	public void setRowId(int parameterIndex, RowId x) throws SQLException {
		pst.setRowId(parameterIndex, x);
	}

	public void setSQLXML(int parameterIndex, SQLXML xmlObject)
			throws SQLException {
		pst.setSQLXML(parameterIndex, xmlObject);
	}

	public void setShort(int parameterIndex, short x) throws SQLException {
		pst.setShort(parameterIndex, x);
	}

	public void setString(int parameterIndex, String x) throws SQLException {
		pst.setString(parameterIndex, x);
	}

	public void setTime(int parameterIndex, Time x, Calendar cal)
			throws SQLException {
		pst.setTime(parameterIndex, x, cal);
	}

	public void setTime(int parameterIndex, Time x) throws SQLException {
		pst.setTime(parameterIndex, x);
	}

	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)
			throws SQLException {
		pst.setTimestamp(parameterIndex, x, cal);
	}

	public void setTimestamp(int parameterIndex, Timestamp x)
			throws SQLException {
		pst.setTimestamp(parameterIndex, x);
	}

	public void setURL(int parameterIndex, URL x) throws SQLException {
		pst.setURL(parameterIndex, x);
	}

	@Deprecated
	public void setUnicodeStream(int parameterIndex, InputStream x, int length)
			throws SQLException {
		pst.setUnicodeStream(parameterIndex, x, length);
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		return pst.unwrap(iface);
	}
}

class BufferedResultSet implements ResultSet {
	private static final Logger logger = LoggerFactory.getLogger(BufferedResultSet.class);
	int readInx;
	ResultSetMetaData metaData;
	JSONArray jsonArray;
	JSONArray record;
	File file;
	List<File> tmpFiles;
	Reader reader;
	
	public BufferedResultSet(List<File> tmpFiles, ResultSetMetaData metaData) throws SQLException {
		this.tmpFiles = tmpFiles;
		this.metaData = metaData;
	}
	
	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		return metaData;
	}
	@Override
	public boolean next() throws SQLException {
		if((tmpFiles!=null && tmpFiles.size() > 0) || (jsonArray!=null && readInx > 0)) {
			if(jsonArray == null) {
				if(file!=null && file.exists()) {
					file.delete();
				}
				file = tmpFiles.remove(0);
				try {
					reader = new BufferedReader(new FileReader(file));
					jsonArray = new JSONArray(new JSONTokener(reader));
				} catch (IOException e) {
					throw new SQLException(e);
				} catch (JSONException e) {
					throw new SQLException(e);
				}
				readInx=0;
			}
			if(jsonArray != null) {
				logger.trace("readed {} th jsonArray size : {} ea" , new Object[] { readInx, jsonArray.length()});
				if(readInx < jsonArray.length()) {
					try {
						record = jsonArray.getJSONArray(readInx++);
					} catch (JSONException e) {
						throw new SQLException(e);
					}
					if(readInx == jsonArray.length()) {
						jsonArray = null;
					}
					return true;
				}
			}
		}
		
		if(file!=null && file.exists()) {
			file.delete();
		}
		
		return false;
	}
	@Override 
	public String getString(int inx) throws SQLException { 
		try {
			return record.getString(inx-1);
		} catch (JSONException e) {
			throw new SQLException(e);
		}
	}

	@Override 
	public void close() throws SQLException { 
		try {
			if(reader!=null) {
				reader.close();
			}
		} catch (NullPointerException e) {
		} catch (IOException e) {
			throw new SQLException (e);
		} finally {
			for(File file : tmpFiles) { if(file.exists()) { file.delete(); } }
		}
	}
	
	
	@Override public InputStream getBinaryStream(int arg0) throws SQLException { return null; }
	@Override public Reader getCharacterStream(int arg0) throws SQLException { return null; }
	@Override public boolean isWrapperFor(Class<?> iface) throws SQLException { return false; }
	@Override public <T> T unwrap(Class<T> iface) throws SQLException { return null; }
	@Override public boolean absolute(int arg0) throws SQLException { return false; }
	@Override public void afterLast() throws SQLException { }
	@Override public void beforeFirst() throws SQLException { }
	@Override public void cancelRowUpdates() throws SQLException { }
	@Override public void clearWarnings() throws SQLException { }
	@Override public void deleteRow() throws SQLException { }
	@Override public int findColumn(String arg0) throws SQLException { return 0; }
	@Override public boolean first() throws SQLException { return false; }
	@Override public Array getArray(int arg0) throws SQLException { return null; }
	@Override public Array getArray(String arg0) throws SQLException { return null; }
	@Override public InputStream getAsciiStream(int arg0) throws SQLException { return null; }
	@Override public InputStream getAsciiStream(String arg0) throws SQLException { return null; }
	@Override public BigDecimal getBigDecimal(int arg0) throws SQLException { return null; }
	@Override public BigDecimal getBigDecimal(String arg0) throws SQLException { return null; }
	@Override public BigDecimal getBigDecimal(int arg0, int arg1) throws SQLException { return null; }
	@Override public BigDecimal getBigDecimal(String arg0, int arg1) throws SQLException { return null; }
	@Override public InputStream getBinaryStream(String arg0) throws SQLException { return null; }
	@Override public Blob getBlob(int arg0) throws SQLException { return null; }
	@Override public Blob getBlob(String arg0) throws SQLException { return null; }
	@Override public boolean getBoolean(int arg0) throws SQLException { return false; }
	@Override public boolean getBoolean(String arg0) throws SQLException { return false; }
	@Override public byte getByte(int arg0) throws SQLException { return 0; }
	@Override public byte getByte(String arg0) throws SQLException { return 0; }
	@Override public byte[] getBytes(int arg0) throws SQLException { return null; }
	@Override public byte[] getBytes(String arg0) throws SQLException { return null; }
	@Override public Reader getCharacterStream(String arg0) throws SQLException { return null; }
	@Override public Clob getClob(int arg0) throws SQLException { return null; }
	@Override public Clob getClob(String arg0) throws SQLException { return null; }
	@Override public int getConcurrency() throws SQLException { return 0; }
	@Override public String getCursorName() throws SQLException { return null; }
	@Override public Date getDate(int arg0) throws SQLException { return null; }
	@Override public Date getDate(String arg0) throws SQLException { return null; }
	@Override public Date getDate(int arg0, Calendar arg1) throws SQLException { return null; }
	@Override public Date getDate(String arg0, Calendar arg1) throws SQLException { return null; }
	@Override public double getDouble(int arg0) throws SQLException { return 0; }
	@Override public double getDouble(String arg0) throws SQLException { return 0; }
	@Override public int getFetchDirection() throws SQLException { return 0; }
	@Override public int getFetchSize() throws SQLException { return 0; }
	@Override public float getFloat(int arg0) throws SQLException { return 0; }
	@Override public float getFloat(String arg0) throws SQLException { return 0; }
	@Override public int getHoldability() throws SQLException { return 0; }
	@Override public int getInt(int arg0) throws SQLException { return 0; }
	@Override public int getInt(String arg0) throws SQLException { return 0; }
	@Override public long getLong(int arg0) throws SQLException { return 0; }
	@Override public long getLong(String arg0) throws SQLException { return 0; }
	@Override public Reader getNCharacterStream(int arg0) throws SQLException { return null; }
	@Override public Reader getNCharacterStream(String arg0) throws SQLException { return null; }
	@Override public NClob getNClob(int arg0) throws SQLException { return null; }
	@Override public NClob getNClob(String arg0) throws SQLException { return null; }
	@Override public String getNString(int arg0) throws SQLException { return null; }
	@Override public String getNString(String arg0) throws SQLException { return null; }
	@Override public Object getObject(int arg0) throws SQLException { return null; }
	@Override public Object getObject(String arg0) throws SQLException { return null; }
	@Override public Object getObject(int arg0, Map<String, Class<?>> arg1) throws SQLException { return null; }
	@Override public Object getObject(String arg0, Map<String, Class<?>> arg1) throws SQLException { return null; }
	@Override public Ref getRef(int arg0) throws SQLException { return null; }
	@Override public Ref getRef(String arg0) throws SQLException { return null; }
	@Override public int getRow() throws SQLException { return 0; }
	@Override public RowId getRowId(int arg0) throws SQLException { return null; }
	@Override public RowId getRowId(String arg0) throws SQLException { return null; }
	@Override public SQLXML getSQLXML(int arg0) throws SQLException { return null; }
	@Override public SQLXML getSQLXML(String arg0) throws SQLException { return null; }
	@Override public short getShort(int arg0) throws SQLException { return 0; }
	@Override public short getShort(String arg0) throws SQLException { return 0; }
	@Override public Statement getStatement() throws SQLException { return null; }
	@Override public String getString(String arg0) throws SQLException { return null; }
	@Override public Time getTime(int arg0) throws SQLException { return null; }
	@Override public Time getTime(String arg0) throws SQLException { return null; }
	@Override public Time getTime(int arg0, Calendar arg1) throws SQLException { return null; }
	@Override public Time getTime(String arg0, Calendar arg1) throws SQLException { return null; }
	@Override public Timestamp getTimestamp(int arg0) throws SQLException { return null; }
	@Override public Timestamp getTimestamp(String arg0) throws SQLException { return null; }
	@Override public Timestamp getTimestamp(int arg0, Calendar arg1) throws SQLException { return null; }
	@Override public Timestamp getTimestamp(String arg0, Calendar arg1) throws SQLException { return null; }
	@Override public int getType() throws SQLException { return 0; }
	@Override public URL getURL(int arg0) throws SQLException { return null; }
	@Override public URL getURL(String arg0) throws SQLException { return null; }
	@Override public InputStream getUnicodeStream(int arg0) throws SQLException { return null; }
	@Override public InputStream getUnicodeStream(String arg0) throws SQLException { return null; }
	@Override public SQLWarning getWarnings() throws SQLException { return null; }
	@Override public void insertRow() throws SQLException { }
	@Override public boolean isAfterLast() throws SQLException { return false; }
	@Override public boolean isBeforeFirst() throws SQLException { return false; }
	@Override public boolean isClosed() throws SQLException { return false; }
	@Override public boolean isFirst() throws SQLException { return false; }
	@Override public boolean isLast() throws SQLException { return false; }
	@Override public boolean last() throws SQLException { return false; }
	@Override public void moveToCurrentRow() throws SQLException { }
	@Override public void moveToInsertRow() throws SQLException { }
	@Override public boolean previous() throws SQLException { return false; }
	@Override public void refreshRow() throws SQLException { }
	@Override public boolean relative(int arg0) throws SQLException { return false; }
	@Override public boolean rowDeleted() throws SQLException { return false; }
	@Override public boolean rowInserted() throws SQLException { return false; }
	@Override public boolean rowUpdated() throws SQLException { return false; }
	@Override public void setFetchDirection(int arg0) throws SQLException { }
	@Override public void setFetchSize(int arg0) throws SQLException { }
	@Override public void updateArray(int arg0, Array arg1) throws SQLException { }
	@Override public void updateArray(String arg0, Array arg1) throws SQLException { }
	@Override public void updateAsciiStream(int arg0, InputStream arg1) throws SQLException { }
	@Override public void updateAsciiStream(String arg0, InputStream arg1) throws SQLException { }
	@Override public void updateAsciiStream(int arg0, InputStream arg1, int arg2) throws SQLException { }
	@Override public void updateAsciiStream(String arg0, InputStream arg1, int arg2) throws SQLException { }
	@Override public void updateAsciiStream(int arg0, InputStream arg1, long arg2) throws SQLException { }
	@Override public void updateAsciiStream(String arg0, InputStream arg1, long arg2) throws SQLException { }
	@Override public void updateBigDecimal(int arg0, BigDecimal arg1) throws SQLException { }
	@Override public void updateBigDecimal(String arg0, BigDecimal arg1) throws SQLException { }
	@Override public void updateBinaryStream(int arg0, InputStream arg1) throws SQLException { }
	@Override public void updateBinaryStream(String arg0, InputStream arg1) throws SQLException { }
	@Override public void updateBinaryStream(int arg0, InputStream arg1, int arg2) throws SQLException { }
	@Override public void updateBinaryStream(String arg0, InputStream arg1, int arg2) throws SQLException { }
	@Override public void updateBinaryStream(int arg0, InputStream arg1, long arg2) throws SQLException { }
	@Override public void updateBinaryStream(String arg0, InputStream arg1, long arg2) throws SQLException { }
	@Override public void updateBlob(int arg0, Blob arg1) throws SQLException { } 
	@Override public void updateBlob(String arg0, Blob arg1) throws SQLException { }
	@Override public void updateBlob(int arg0, InputStream arg1) throws SQLException { }
	@Override public void updateBlob(String arg0, InputStream arg1) throws SQLException { }
	@Override public void updateBlob(int arg0, InputStream arg1, long arg2) throws SQLException { }
	@Override public void updateBlob(String arg0, InputStream arg1, long arg2) throws SQLException { }
	@Override public void updateBoolean(int arg0, boolean arg1) throws SQLException { }
	@Override public void updateBoolean(String arg0, boolean arg1) throws SQLException { }
	@Override public void updateByte(int arg0, byte arg1) throws SQLException { }
	@Override public void updateByte(String arg0, byte arg1) throws SQLException { }
	@Override public void updateBytes(int arg0, byte[] arg1) throws SQLException { }
	@Override public void updateBytes(String arg0, byte[] arg1) throws SQLException { }
	@Override public void updateCharacterStream(int arg0, Reader arg1) throws SQLException { }
	@Override public void updateCharacterStream(String arg0, Reader arg1) throws SQLException { }
	@Override public void updateCharacterStream(int arg0, Reader arg1, int arg2) throws SQLException { }
	@Override public void updateCharacterStream(String arg0, Reader arg1, int arg2) throws SQLException { }
	@Override public void updateCharacterStream(int arg0, Reader arg1, long arg2) throws SQLException { }
	@Override public void updateCharacterStream(String arg0, Reader arg1, long arg2) throws SQLException { }
	@Override public void updateClob(int arg0, Clob arg1) throws SQLException { }
	@Override public void updateClob(String arg0, Clob arg1) throws SQLException { }
	@Override public void updateClob(int arg0, Reader arg1) throws SQLException { }
	@Override public void updateClob(String arg0, Reader arg1) throws SQLException { }
	@Override public void updateClob(int arg0, Reader arg1, long arg2) throws SQLException { }
	@Override public void updateClob(String arg0, Reader arg1, long arg2) throws SQLException { }
	@Override public void updateDate(int arg0, Date arg1) throws SQLException { }
	@Override public void updateDate(String arg0, Date arg1) throws SQLException { }
	@Override public void updateDouble(int arg0, double arg1) throws SQLException { }
	@Override public void updateDouble(String arg0, double arg1) throws SQLException { }
	@Override public void updateFloat(int arg0, float arg1) throws SQLException { }
	@Override public void updateFloat(String arg0, float arg1) throws SQLException { }
	@Override public void updateInt(int arg0, int arg1) throws SQLException { }
	@Override public void updateInt(String arg0, int arg1) throws SQLException { }
	@Override public void updateLong(int arg0, long arg1) throws SQLException { }
	@Override public void updateLong(String arg0, long arg1) throws SQLException { }
	@Override public void updateNCharacterStream(int arg0, Reader arg1) throws SQLException { }
	@Override public void updateNCharacterStream(String arg0, Reader arg1) throws SQLException { }
	@Override public void updateNCharacterStream(int arg0, Reader arg1, long arg2) throws SQLException { }
	@Override public void updateNCharacterStream(String arg0, Reader arg1, long arg2) throws SQLException { }
	@Override public void updateNClob(int arg0, NClob arg1) throws SQLException { }
	@Override public void updateNClob(String arg0, NClob arg1) throws SQLException { }
	@Override public void updateNClob(int arg0, Reader arg1) throws SQLException { }
	@Override public void updateNClob(String arg0, Reader arg1) throws SQLException { }
	@Override public void updateNClob(int arg0, Reader arg1, long arg2) throws SQLException { }
	@Override public void updateNClob(String arg0, Reader arg1, long arg2) throws SQLException { }
	@Override public void updateNString(int arg0, String arg1) throws SQLException { }
	@Override public void updateNString(String arg0, String arg1) throws SQLException { }
	@Override public void updateNull(int arg0) throws SQLException { }
	@Override public void updateNull(String arg0) throws SQLException { }
	@Override public void updateObject(int arg0, Object arg1) throws SQLException { }
	@Override public void updateObject(String arg0, Object arg1) throws SQLException { }
	@Override public void updateObject(int arg0, Object arg1, int arg2) throws SQLException { }
	@Override public void updateObject(String arg0, Object arg1, int arg2) throws SQLException { }
	@Override public void updateRef(int arg0, Ref arg1) throws SQLException { }
	@Override public void updateRef(String arg0, Ref arg1) throws SQLException { }
	@Override public void updateRow() throws SQLException { }
	@Override public void updateRowId(int arg0, RowId arg1) throws SQLException { }
	@Override public void updateRowId(String arg0, RowId arg1) throws SQLException { }
	@Override public void updateSQLXML(int arg0, SQLXML arg1) throws SQLException { }
	@Override public void updateSQLXML(String arg0, SQLXML arg1) throws SQLException { }
	@Override public void updateShort(int arg0, short arg1) throws SQLException { }
	@Override public void updateShort(String arg0, short arg1) throws SQLException { }
	@Override public void updateString(int arg0, String arg1) throws SQLException { }
	@Override public void updateString(String arg0, String arg1) throws SQLException { }
	@Override public void updateTime(int arg0, Time arg1) throws SQLException { }
	@Override public void updateTime(String arg0, Time arg1) throws SQLException { }
	@Override public void updateTimestamp(int arg0, Timestamp arg1) throws SQLException { }
	@Override public void updateTimestamp(String arg0, Timestamp arg1) throws SQLException { }
	@Override public boolean wasNull() throws SQLException { return false; }
}

class BufferedResultSetMetaData implements ResultSetMetaData {
	int columnCount;
	public List<String> columnNames;
	public List<String> columnTypeNames;
	
	public BufferedResultSetMetaData(ResultSetMetaData metaData) throws SQLException {
		this.columnCount = metaData.getColumnCount();
		columnNames = new ArrayList<String>();
		columnTypeNames = new ArrayList<String>();
		for(int inx=1;inx<=columnCount;inx++) {
			columnNames.add(metaData.getColumnName(inx));
			columnTypeNames.add(metaData.getColumnTypeName(inx));
		}
	}
	
	@Override 
	public int getColumnCount() throws SQLException { 
		return columnCount; 
	}
	@Override public String getColumnName(int inx) throws SQLException { 
		try {
			return columnNames.get(inx-1);
		} catch (ArrayIndexOutOfBoundsException e) {
			throw new SQLException(e);
		}
	}
	@Override public String getColumnTypeName(int inx) throws SQLException { 
		try {
			return columnTypeNames.get(inx-1);
		} catch (ArrayIndexOutOfBoundsException e) {
			throw new SQLException(e);
		}
	}
	@Override public boolean isWrapperFor(Class<?> iface) throws SQLException { return false; }
	@Override public <T> T unwrap(Class<T> iface) throws SQLException { return null; }
	@Override public String getCatalogName(int arg0) throws SQLException { return null; }
	@Override public String getColumnClassName(int arg0) throws SQLException { return null; }
	@Override public int getColumnDisplaySize(int arg0) throws SQLException { return 0; }
	@Override public String getColumnLabel(int arg0) throws SQLException { return null; }
	@Override public int getColumnType(int arg0) throws SQLException { return 0; }
	@Override public int getPrecision(int arg0) throws SQLException { return 0; }
	@Override public int getScale(int arg0) throws SQLException { return 0; }
	@Override public String getSchemaName(int arg0) throws SQLException { return null; }
	@Override public String getTableName(int arg0) throws SQLException { return null; }
	@Override public boolean isAutoIncrement(int arg0) throws SQLException { return false; }
	@Override public boolean isCaseSensitive(int arg0) throws SQLException { return false; }
	@Override public boolean isCurrency(int arg0) throws SQLException { return false; }
	@Override public boolean isDefinitelyWritable(int arg0) throws SQLException { return false; }
	@Override public int isNullable(int arg0) throws SQLException { return 0; }
	@Override public boolean isReadOnly(int arg0) throws SQLException { return false; }
	@Override public boolean isSearchable(int arg0) throws SQLException { return false; }
	@Override public boolean isSigned(int arg0) throws SQLException { return false; }
	@Override public boolean isWritable(int arg0) throws SQLException { return false; }
}
